@page "/ProcessOrder"
@using BlazorServerApp.Data
@inject Service service
@inject NavigationManager NavigateTo
@using System.IO
@using Blazored.Modal.Services
@inject IModalService ModalService
@inject IModalService modal  



<PageTitle>Stock</PageTitle>

<h1>Processing undelivered/ orders</h1>
<p> Select what you want to do in the drop</p>

<select title="order" id="order" value="@selectedOrder" @onchange="HandleOrderChange">
    <option value="">select an order to process</option>
    @foreach (var item in unprocessedOrders)
    {
        <option value="@item.id"> Order number: @item.id Customer id: @item.customerid order date: @item.odate order status:@item.status</option>
    }
</select>
<br>
<br>
The list of the following products should be distributed for delivery:
<br>
<br>

<select title="orderrow" id="orderrow" value="@selectedItemId" @onchange="HandleItemChange">
    <option value="">select item toprocess</option> 
    @foreach (var a in theOrderrows)
    {
        <option value="@GetUniqueIdentifier(a.id, a.color, a.size)"> article: @a.id quantity: @a.quantity of @a.name color: @a.color size: @a.size.ToUpper()  </option>
    }
</select> 

<ul>
    @foreach (var a in stocklist)
    {
        
        <li @onclick="() => PickFromStock(a)" style="cursor: pointer;"> pid: @a.id name: @a.name color: @a.color size: @a.size.ToUpper() 
                place - shelf: @a.shellnr slot: @a.slot in stock: @a.stockquant ordered: @a.orderquant delivered:
        </li>
    }
</ul>

@code{

    static int selectedOrder;

    static int counter=0;

    public string? selectedItemId;

    public static List<Orders> unprocessedOrders = Dbmethods.ProcessMyOrders();

    public static List<int> delivquant = new List<int>();
    
    public static List<Orderrowstwo> theOrderrows = new List<Orderrowstwo>();

    public static List<ReportStock> stocklist = new List<ReportStock>();


    private void HandleOrderChange(ChangeEventArgs e)
    {
        selectedOrder = int.Parse(e.Value.ToString());
        getOrderdetails();
    }

    private void HandleItemChange(ChangeEventArgs e)
    {
        selectedItemId = e.Value.ToString();
        getStockdetails();
    }

    private void getOrderdetails()
    {
        theOrderrows =Dbmethods.MyOrderrows(selectedOrder);
    }
    
    private void getStockdetails()
    {
        int id;
        string color="";
        string size="";

        if (selectedItemId.Length > 3) {
            string[] theids = selectedItemId.Split("_");
            if (theids.Count()==3)
            {
                id=int.Parse(theids[0]);
                color=theids[1];
                size=theids[2];
                stocklist=Dbmethods.StockItems(selectedOrder, id, color, size);
            }

        }
    }

    public string GetUniqueIdentifier(int id, string c, string s)
    {
        // Use a property or a combination of properties to create a unique identifier
        return $"{id}_{c}_{s}";
    }

    private void PickFromStock(ReportStock selectedItem)
    {
        

        // Decrease stock quantity by 1
        if (selectedItem.stockquant - selectedItem.orderquant > 0)
        {
            // updating the row update the DB 
            selectedItem.stockquant -= 1; 
             
            Console.WriteLine($"Picked 1 item from {selectedItem.shellnr} - Remaining stock: {selectedItem.stockquant}");
        }
        else
        {
            Console.WriteLine($"No stock left at {selectedItem.shellnr}.");
            // put this in separate window
        }
    }
}
